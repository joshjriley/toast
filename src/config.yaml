{
    #######################################################################
    # DATA INPUTS
    #######################################################################
    'telescopesFile'     : '../test/2020A-telescopes.json',
    'instrumentsFile'    : '../test/2020A-instruments.json',
    'moonPhasesFile'     : '../test/2020A-moon-phases.json',
    'telShutdownsFile'   : '../test/2020A-tel-shutdowns.json',
    'instrShutdownsFile' : '../test/2020A-instr-shutdowns.json',
    'engineeringFile'    : '../test/2020A-engineering.json',
    'programsFile'       : '../test/2020A-programs.json',




    #######################################################################
    # SCHEDULING CONSTANTS
    #######################################################################
    
    #Minimal block size
    #todo: these could go in each telescopes
    'slotPerc': 0.25,

    #For each instrument, an array of instruments that cannot be scheduled on same night
    #NOTE: instr list is considered wildcard match on each (ie LRIS = *LRIS*)
    'instrIncompatMatrix':
    {
        'HIRESb'      : ['HIRESr'],
        'HIRESr'      : ['HIRESb'],
        'LRIS-ADC'    : ['LRISp-ADC', 'MOSFIRE'],
        'LRISp-ADC'   : ['LRIS-ADC'],
        'MOSFIRE'     : ['LRIS'],
        'OSIRIS-LGS'  : [],
        'OSIRIS-NGS'  : [],

        'DEIMOS'      : [          'ESI', 'KCWI', 'NIRSPEC'],
        'ESI'         : ['DEIMOS',        'KCWI', 'NIRSPAO', 'NIRSPEC', 'NIRC2', 'NIRES'],
        'ESI-ifu'     : ['DEIMOS',        'KCWI', 'NIRSPAO', 'NIRSPEC', 'NIRC2', 'NIRES'],
        'KCWI'        : ['DEIMOS', 'ESI',         'NIRSPEC'],
        'NIRC2-LGS'   : [          'ESI'],
        'NIRC2-NGS'   : [          'ESI'],
        'NIRES'       : [          'ESI'],
        'NIRSPAO-LGS' : [          'ESI'],
        'NIRSPAO-NGS' : [          'ESI'],
        'NIRSPEC'     : ['DEIMOS', 'ESI', 'KCWI'],
    },


    #######################################################################
    # SORTING PARAMETERS
    #######################################################################

    #order score adjust if block has a specified date (NOTE: most cadence have specified date)
    'blockOrderReqDateScore': 5,

    #order score adjust if block has a specified portion 
    'blockOrderReqPortionScore': 2,

    #order score adjust by moonIndex type
    'blockOrderMoonTypeScore':
    {
        'D'    : 3,
        'G-DL' : 1,
        'G-DE' : 1,
        'B'    : 0
    },

    #order score adjust by how strict the moon preferences are
    #ie if moonPrefs has one 'P', then all 5 points are had.  If 2 'P's, then 5/2, and so on
    'blockOrderMoonPrefStrictScore': 5,

    #order score mult if block type is cadence
    'blockOrderCadenceMult': 1.25,

    #plus or minus adjustment factor to order score (ie 0.10 is +- 10%)
    #NOTE: This can be bumped up to get some very different ordering if scheduling is coming out the same every time
    'blockOrderRandomMult': 0.20,


    #######################################################################
    # SLOT SCORING PARAMETERS
    #######################################################################
    #todo: should we change this to assume a scheduled block is given a perfect score of 1 and scoring only multiplies
    # by a factor < 1.0 for less than perfect things?

    # score added for slot match with date range preference
    # P = preferred, A = acceptable, N = neutral, X = avoid
    # NOTE: A small non-zero score is given to X to differentiate it from slots that are absolutely not allowed.
    'moonDatePrefScore':
    {
        'P': 10,
        'A': 5,
        'N': 2,
        'X': 0.1
    },

    #score added for slot match with requested (TAC scheduled) moon phase
    'reqMoonIndexScore': 15,

    #score added for slot if same instrument scheduled that night (ie split nights should be same instrument when possible)
    'scheduledInstrMatchScore': 2,

    #score added for slot if it matches requested date
    'reqDateIndexScore': 20,

    #score added for slot if it matches requested portion
    'reqPortionIndexScore': 10,

    #score added for slot if adjacent date has same instrument scheduled (up to 2x) 
    #(NOTE: This helps produce instr runs, but it is in addition to specific instr adjacent score (ie HIRESr vs HIRESb))
    'adjExactInstrScore': 4,
    'adjBaseInstrScore': 2,

    #score added for slot if it fills beginning or end slots
    #NOTE: This prevents 0.5 size from sitting in middle of night
    'outerSlotScore': 4,

    #score added if other slots are filled already on this date
    #NOTE: This promotes filling unused slots. Probably want to keep this number small.
    'avoidEmptyDatesScore': 5,

    #Slot score percentage difference from top slot score value for it to be considered for pool of random slots to choose from.
    # value from 0 to 1.0 where 0.0 means keep only the top scoring slots, 0.20 means choose from top 20% of values, and 1.0 means chose randomly from all slots
    'slotScoreTopPerc': 0.25,




    #######################################################################
    # SCHEDULE SCORING PARAMETERS
    #######################################################################

    # Penalized score based on how many times we switch instruments during a night, for each night.
    'schedInstrSwitchPenalty': -1,

    # Penalized score based on how many times we switch instruments the next night, ie reconfigs.
    'schedReconfigPenalty': -4,

    'schedMoonPrefScore': {'P': 4,  'A': 2,  'N': 0,  'X': -10},

    'schedMoonIndexScore': 4,

    'schedReqDatePenalty': -10,

    'schedReqPortionPenalty': -8,

    'schedOrphanBlockPenalty': -100,


}