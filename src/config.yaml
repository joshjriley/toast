#########################################################################################
# Edit and save this file with a different name per semester, ie config-2020A.yaml
#########################################################################################
{

    #----------------------------------------------------------------------
    # SEMESTER
    #----------------------------------------------------------------------
    'semester' : '2020A',


    #----------------------------------------------------------------------
    # DATA INPUTS
    #----------------------------------------------------------------------
    'files':
    {
        'telescopes'     : 'data/2020A/2020A-telescopes.json',
        'instruments'    : 'data/2020A/2020A-instruments.json',
        'moonPhases'     : 'data/2020A/2020A-moon-phases.json',
        'nightPhases'    : 'data/2020A/2020A-night-phases.csv',
        'instrShutdowns' : 'data/2020A/2020A-instr-shutdowns.json',
        'engineering'    : 'data/2020A/2020A-engineering.json',
        'programs'       : 'data/2020A/2020A-programs.json',
    },


    #----------------------------------------------------------------------
    # SCHEDULING CONSTANTS
    #----------------------------------------------------------------------
    
    #Minimal block size
    #todo: these could go in each telescopes
    'slotPerc': 0.25,

    #For each instrument, an array of instruments that cannot be scheduled on same night. 
    #NOTE: This also defines when a reconfig was necessary when comparing a scheduled night with previous night.
    #NOTE: Entries should mirror each other for both incompat instr pairs.
    #NOTE: instr list can contain specific instrument name or instrument base name to catch all (ie LRISp-ADC or LRIS)
    'instrSplitIncompat':
    {
        'HIRESb'      : ['HIRESr'],
        'HIRESr'      : ['HIRESb'],
        'LRIS-ADC'    : ['LRISp-ADC', 'MOSFIRE'],
        'LRISp-ADC'   : ['LRIS-ADC',  'MOSFIRE'],
        'MOSFIRE'     : ['LRIS'],
        'OSIRIS-LGS'  : [],
        'OSIRIS-NGS'  : [],

        'DEIMOS'      : [          'ESI', 'KCWI', 'NIRSPEC'],
        'ESI'         : ['DEIMOS',        'KCWI', 'NIRSPAO', 'NIRSPEC', 'NIRC2', 'NIRES'],
        'ESI-ifu'     : ['DEIMOS',        'KCWI', 'NIRSPAO', 'NIRSPEC', 'NIRC2', 'NIRES'],
        'KCWI'        : ['DEIMOS', 'ESI',         'NIRSPEC'],
        'NIRC2-LGS'   : [          'ESI'],
        'NIRC2-NGS'   : [          'ESI'],
        'NIRES'       : [          'ESI'],
        'NIRSPAO-LGS' : [          'ESI'],
        'NIRSPAO-NGS' : [          'ESI'],
        'NIRSPEC'     : ['DEIMOS', 'ESI', 'KCWI'],
    },

    #For each instrument, an array of instruments that cannot be scheduled on next night
    #NOTE: instr list can contain specific instrument name or instrument base name to catch all (ie LRISp-ADC or LRIS)
    'instrReconfigIncompat':
    {
        'HIRESb'      : ['HIRESr'],
        'HIRESr'      : [], #NOTE: HIRESr to HIRESb is ok but not vice versa
        'LRIS-ADC'    : [],
        'LRISp-ADC'   : [],
        'MOSFIRE'     : [],
        'OSIRIS-LGS'  : [],
        'OSIRIS-NGS'  : [],

        'DEIMOS'      : [],
        'ESI'         : [],
        'ESI-ifu'     : [],
        'KCWI'        : [],
        'NIRC2-LGS'   : [],
        'NIRC2-NGS'   : [],
        'NIRES'       : [],
        'NIRSPAO-LGS' : ['NIRSPEC'],
        'NIRSPAO-NGS' : ['NIRSPEC'],
        'NIRSPEC'     : ['NIRSPAO'],
    },



    #----------------------------------------------------------------------
    # SORTING PARAMETERS
    #----------------------------------------------------------------------

    #order score and multiplier adjust based on size of block (NOTE: size is always a fraction ie 0.25, 0.5, 0.75, 1.0)
    'blockOrderSizeScore': 5,
    'blockOrderSizeMult': 4,

    #order score adjust if block has a specified date (NOTE: most cadence have specified date)
    'blockOrderReqDateScore': 8,

    #order score adjust if block has a specified portion 
    'blockOrderReqPortionScore': 2,

    #order score adjust by moonIndex type
    'blockOrderMoonTypeScore':
    {
        'D'    : 3,
        'G-DL' : 1,
        'G-DE' : 1,
        'B'    : 0
    },

    #order score adjust by how strict the moon preferences are
    #ie if moonPrefs has one 'P', then all 5 points are had.  If 2 'P's, then 5/2, and so on
    'blockOrderMoonPrefStrictScore': 8,

    #order score adjust if block type is cadence
    'blockOrderCadenceScore': 10,

    #order score adjust if block is grouped in a run
    'blockGroupedScore': 7,

    #plus or minus adjustment factor to order score (ie 0.10 is +- 10%)
    #NOTE: This can be bumped up to get some very different ordering if scheduling is coming out the same every time
    'blockOrderRandomScoreMult': 0.08,

    #plus or minus adjustment factor to order position (ie 0.10 is +- 10%)
    #NOTE: This can be bumped up to get some very different ordering if scheduling is coming out the same every time
    'blockOrderRandomIndexMult': 0.08,

    #Order score adjustment for problematic blocks that could not be scheduled or were scheduled poorly
    #NOTE: This is a small learning feedback.  Set to 0 to turn off.
    'blockOrderProblemLearnScore': 1.0,

    #Max block order score adjustment over time
    #TODO: Is this a good idea?
    'blockOrderProblemLearnMax': 15.0,

    #Institutional balancing on/off.  And, balanace adjusts which schedules that many more extra blocks each cycle through
    #the institution letters.  Balancing by default calcs the proportions, but adjusts give more.
    'blockOrderInstBalance': True,
    'blockOrderInstBalanceAdjusts':
    {
        # 'N': 1,
        # "U": 3,
    },


    #----------------------------------------------------------------------
    # SLOT SCORING PARAMETERS
    #----------------------------------------------------------------------
    #todo: should we change this to assume a scheduled block is given a perfect score of 1 and scoring only multiplies
    # by a factor < 1.0 for less than perfect things?

    # score added for slot match with date range preference
    # P = preferred, A = acceptable, N = neutral, X = avoid
    # NOTE: A small non-zero score is given to X to differentiate it from slots that are absolutely not allowed.
    'moonDatePrefScore':
    {
        'P': 12,
        'A': 6,
        'N': 2,
        'X': 0.0
    },

    #score added for slot match with requested (TAC scheduled) moon phase
    'reqMoonIndexScore': 15,

    #score added for slot if same instrument scheduled that night (ie split nights should be same instrument when possible)
    'scheduledInstrMatchScore': 2,

    #score added for slot if it matches requested date
    'reqDateIndexScore': 20,

    #score added for slot if it matches requested portion
    'reqPortionIndexScore': 10,

    #score added for slot if it matches requested date options (ie cadence date + range options)
    #NOTE: dates farther away from dates center will decay score by 1/d
    'reqDateOptionsScore': 10,

    #score added for slot based on instrument adjacency (up to 2x) 
    #(adjExact is exact same instr, adjBase is same instr base, adjEmpty is no adj instr, adjLoc is different instr and diff loc)
    #(NOTE: This helps produce instr runs, but it is in addition to specific instr adjacent score (ie HIRESr vs HIRESb))
    #(NOTE: adjLocInstr is an adjacent different instrument but same location (ie CASS, RNAS) and these should be avoided)
    'adjExactInstrScore': 4,
    'adjBaseInstrScore': 2,
    'adjEmptyInstrScore': 1,
    'adjLocInstrScore': 0.5,


    #score added for slot if adjacent date has same program scheduled or in same run group (up to 2x) 
    #(NOTE: This helps produce program runs)
    'adjProgramScore': 1,
    'adjGroupScore': 6,

    #penalty added for slot if same program same night
    'sameProgramPenalty': -4,

    #score added for slot if it fills beginning or end slots
    #NOTE: This prevents 0.5 size from sitting in middle of night
    'outerSlotScore': 4,

    #score added if other slots are filled already on this date
    #NOTE: This promotes filling unused slots. Probably want to keep this number small.
    'avoidEmptyDatesScore': 5,

    #Slot score percentage difference from top slot score value for it to be considered for pool of random slots to choose from.
    # value from 0 to 1.0 where 0.0 means keep only the top scoring slots, 0.20 means choose from top 20% of values, and 1.0 means chose randomly from all slots
    'slotScoreTopPerc': 0.20,

    #plus or minus adjustment factor to score (ie 0.10 is +- 10%)
    #NOTE: This can be bumped up to get some very different scoring if scheduling is coming out the same every time
    'slotScoreRandomMult': 0.00,



    #----------------------------------------------------------------------
    # SCHEDULE SCORING PARAMETERS
    #----------------------------------------------------------------------

    # Penalized score based on how many times we switch instruments during a night, for each night.
    'schedInstrSwitchPenalty': -2,

    # Penalized score based on how many times we switch instruments the next night, ie reconfigs.
    'schedReconfigPenalty': -4,

    # Score based on whether moon pref was met
    'schedMoonPrefScore': {'P': 5,  'A': 2,  'N': -2,  'X': -15},

    # Score based on if scheduled moon index was met
    'schedMoonIndexScore': 2,

    # Penalty if we didn't schedule requested date or dateOptions
    # NOTE: For date options, penalty will scale if we hit a lower priority date option
    'schedReqDatePenalty': -30,

    #penalty if we didn't schedule requested portion of night
    'schedReqPortionPenalty': -15,

    # Penalty if we didn't schedule one of requested date options
    # NOTE: Penalty will scale if we hit a lower priority date option
    'schedReqDateOptionsPenalty': -30,

    #Penalty for blocks that could not be scheduled.
    #todo: is this too steep a penalty given we can manually adjust things later?
    'schedOrphanBlockPenalty': -50,

    #penalty for same program same night
    #todo: Not sure if this is the right approach to avoid this
    'schedSameProgramPenalty': -2,

    #penalty for same program same night
    #todo: Not sure if this is the right approach to avoid this
    'schedNotGroupedPenalty': -8,


    #----------------------------------------------------------------------
    # MISC
    #----------------------------------------------------------------------
    'correctMoonPrefConflicts': True,


    #----------------------------------------------------------------------
    # DATABASE CONNECTION INFO
    #----------------------------------------------------------------------
    'database':
    {
        "keckOperations":
        {
            "server" : "",
            "user"   : "",
            "pwd"    : "",
            "port"   : 0,
            "type"   : ""
        },
        "proposals":
        {
            "server" : "",
            "user"   : "",
            "pwd"    : "",
            "port"   : 0,
            "type"   : ""
        }
    },

}